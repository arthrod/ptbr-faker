"""Test configuration and fixtures."""
import json
from pathlib import Path
import pytest

@pytest.fixture
def test_data_path() -> Path:
    """Return path to test data file."""
    return Path('data/population_data_2024_with_postalcodes_updated.json')

@pytest.fixture
def test_data(test_data_path) -> dict:
    """Load test data from JSON file."""
    with test_data_path.open(encoding='utf-8') as f:
        return json.load(f)
"""Tests for the BrazilianNameSampler class."""
import pytest
from src.samplers.name import BrazilianNameSampler
from src.time_period import TimePeriod

def test_name_sampler_initialization(test_data_path):
    """Test that sampler initializes correctly with valid data."""
    sampler = BrazilianNameSampler(test_data_path)
    assert sampler.name_data is not None
    assert sampler.surname_data is not None

def test_name_sampler_invalid_path():
    """Test that sampler raises error with invalid file path."""
    with pytest.raises(FileNotFoundError):
        BrazilianNameSampler('invalid_path.json')

def test_random_name_generation(test_data):
    """Test basic name generation."""
    sampler = BrazilianNameSampler(test_data)
    name = sampler.get_random_name()
    assert isinstance(name, str)
    assert len(name) > 0

def test_random_name_with_period(test_data):
    """Test name generation for specific time period."""
    sampler = BrazilianNameSampler(test_data)
    name = sampler.get_random_name(time_period=TimePeriod.UNTIL_1950)
    assert isinstance(name, str)
    assert len(name) > 0

def test_random_surname(test_data):
    """Test surname generation."""
    sampler = BrazilianNameSampler(test_data)
    surname = sampler.get_random_surname()
    assert isinstance(surname, str)
    assert len(surname) > 0
    assert ' ' in surname  # Should have two surnames by default

def test_single_surname(test_data):
    """Test single surname generation."""
    sampler = BrazilianNameSampler(test_data)
    surname = sampler.get_random_surname(with_only_one_surname=True)
    assert isinstance(surname, str)
    assert len(surname) > 0
    
def test_top_40_surname(test_data):
    """Test top 40 surname generation."""
    sampler = BrazilianNameSampler(test_data)
    surname = sampler.get_random_surname(top_40=True)
    assert isinstance(surname, str)
    assert len(surname) > 0

def test_raw_name_format(test_data):
    """Test raw name format."""
    sampler = BrazilianNameSampler(test_data)
    name = sampler.get_random_name(raw=True)
    assert name.isupper()
"""Tests for the BrazilianLocationSampler class."""
import pytest
from src.samplers.location import BrazilianLocationSampler

def test_location_sampler_initialization(test_data_path):
    """Test that sampler initializes correctly with valid data."""
    sampler = BrazilianLocationSampler(test_data_path)
    assert sampler.data is not None
    assert len(sampler.state_weights) > 0
    assert len(sampler.city_weights_by_state) > 0

def test_get_state(test_data_path):
    """Test state generation."""
    sampler = BrazilianLocationSampler(test_data_path)
    state_name, state_abbr = sampler.get_state()
    assert isinstance(state_name, str)
    assert isinstance(state_abbr, str)
    assert len(state_abbr) == 2

def test_get_city(test_data_path):
    """Test city generation."""
    sampler = BrazilianLocationSampler(test_data_path)
    city_name, state_abbr = sampler.get_city()
    assert isinstance(city_name, str)
    assert isinstance(state_abbr, str)
    assert len(state_abbr) == 2

def test_get_state_and_city(test_data_path):
    """Test combined state and city generation."""
    sampler = BrazilianLocationSampler(test_data_path)
    state_name, state_abbr, city_name = sampler.get_state_and_city()
    assert isinstance(state_name, str)
    assert isinstance(state_abbr, str)
    assert isinstance(city_name, str)
    assert len(state_abbr) == 2

def test_cep_formatting(test_data_path):
    """Test CEP formatting."""
    sampler = BrazilianLocationSampler(test_data_path)
    location = sampler.get_random_location(only_cep=True)
    assert len(location) == 9  # CEP format: XXXXX-XXX
    assert '-' in location

def test_cep_without_dash(test_data_path):
    """Test CEP formatting without dash."""
    sampler = BrazilianLocationSampler(test_data_path)
    location = sampler.get_random_location(only_cep=True, cep_without_dash=True)
    assert len(location) == 8  # CEP format: XXXXXXXX
    assert '-' not in location

def test_full_location_format(test_data_path):
    """Test full location string formatting."""
    sampler = BrazilianLocationSampler(test_data_path)
    location = sampler.get_random_location()
    assert isinstance(location, str)
    assert ',' in location
    assert '(' in location and ')' in location

def test_no_parenthesis_format(test_data_path):
    """Test location formatting without parentheses."""
    sampler = BrazilianLocationSampler(test_data_path)
    location = sampler.get_random_location(no_parenthesis=True)
    assert isinstance(location, str)
    assert ',' in location
    assert '(' not in location and ')' not in location
"""Tests for the CLI interface."""
from typer.testing import CliRunner
from src.cli.commands import app

runner = CliRunner()

def test_cli_basic_sample():
    """Test basic CLI sample command."""
    result = runner.invoke(app, ['sample'])
    assert result.exit_code == 0
    assert len(result.stdout) > 0

def test_cli_multiple_samples():
    """Test generating multiple samples."""
    result = runner.invoke(app, ['sample', '-q', '3'])
    assert result.exit_code == 0
    assert len(result.stdout) > 0

def test_cli_only_names():
    """Test generating only names."""
    result = runner.invoke(app, ['sample', '-n'])
    assert result.exit_code == 0
    assert len(result.stdout) > 0

def test_cli_only_surnames():
    """Test generating only surnames."""
    result = runner.invoke(app, ['sample', '-s'])
    assert result.exit_code == 0
    assert len(result.stdout) > 0

def test_cli_only_cep():
    """Test generating only CEP."""
    result = runner.invoke(app, ['sample', '--only-cep'])
    assert result.exit_code == 0
    assert len(result.stdout) > 0
